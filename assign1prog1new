#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct node{
  int data;
  struct node *next;
}*head=NULL;

struct node* create(int A[], int n)
{
  int i;
  struct node *temp, *last, *p;
  p = (struct node *)malloc(sizeof(struct node));
  p->data = A[0];
  p->next = NULL;
  last = p;

  for(i=1;i<=n;i++)
    {
      temp = (struct node *)malloc(sizeof(struct node));
      temp->data = A[i];
      temp->next = NULL;
      last->next = temp;
      last = temp;
    }
  return p;
}

struct node* addNode(int data)
{
  struct node* temp = (struct node*)malloc(sizeof(struct node));
  temp->data = data;
  temp->next = NULL;
  return temp;
}

void reverseLinkList(struct node* p, int l){ 
    int i=0;
  struct node* q=p;
  int A[l];
  while(q!=NULL)
    {
      A[i] = q->data;
      i++;
      q=q->next;
    }
  q=p;
  i--;
  while(q!=NULL)
    {
      q->data = A[i];
      i--;
      q=q->next;
    }
    
  }


void display(struct node *p)
{
  while(p!=NULL)
    {
      printf("%d", p->data);
      p = p->next;
    }
}


struct node* addLinkList(struct node* p, struct node* q)
{
  struct node* r = (struct node*)malloc(sizeof(struct node));
  struct node* temp = r;
  int sum,carry=0;
  while(p!=NULL || q!=NULL)
    {
      if(p==NULL)
      {
        sum = q->data;
      }else if (q==NULL)
      {
        sum = p->data;
      }else{
        sum = p->data + q->data;
      }

      temp->data = (sum%10) + carry;
      
      if((sum-10) >= 0)
      {
        carry=sum/10;
       
      }else{
        carry=0;
      }
     
      if(p==NULL)
      {
        q=q->next;
      }else if (q==NULL)
      {
        p=p->next;
      }else{
        p=p->next;
      q=q->next;
      }
        temp->next = (struct node*)malloc(sizeof(struct node));
      temp=temp->next;
      
      
    }

  return r;
}


struct node* mulLinkList(struct node* p, struct node* q)
{
  struct node* result = (struct node*)malloc(sizeof(struct node));
  struct node* temp = result;
  struct node* temp2 = result;
  struct node* y = temp;
  struct node* z = temp2;
  struct node* a = p;
  struct node* b = q;
  int x,i, carry=0, flag=0;
  while(b!=NULL)
    {
      while(a!=NULL)
        {
          if(flag!=0)
          {
            i=flag;
            while(i!=0)
              {
                temp->data = 0;
                temp->next = (struct node*)malloc(sizeof(struct node));
                temp = temp->next;
                i--;
              }
          }

          
          x = b->data * a->data;
          temp->data = (x%10) + carry;
          if((x-10) >= 0)
          {
            carry = x/10;
          }else
          {
            carry = 0;
          }
    
          a=a->next;
          temp->next = (struct node*)malloc(sizeof(struct node));
          temp=temp->next;
          
        }
      temp=y;
      temp2 = temp;
      b=b->next;
      a=p;
      carry=0;
      flag++;
    }

  return result;
}


int main()
{
  char A[15]="";
  char B[15]="";
  scanf("%s", A);
  scanf("%s", B);
  int i = strlen(A)-1;
  int j = strlen(B)-1;
  int x[i+1];
  int y[j+1];
  while(i>=0)
    {
      x[i] = A[i]-48;
      i--;
    }
   while(j>=0)
    {
      y[j] = B[j]-48;
      j--;
    }
   i = strlen(A)-1;
   j = strlen(B)-1;

  // creating first link list
  struct node* first = create(x,i);
  reverseLinkList(first,i);
   display(first);
  printf("\n");
  // creating second link list
  struct node* second = create(y,j);
  reverseLinkList(second,j);
  display(second);
  printf("\n");
  
  // adding two link lists
  struct node* add = addLinkList(first,second);
  i=0;
  struct node* temp =add;
  while(temp!=NULL)
    {
      i++;
      temp=temp->next;
    }
  reverseLinkList(add,i);
  display(add);
  printf("\n");


  // Multiplying two link lists
  struct node *mul = mulLinkList(first, second);
  display(mul);
  // AddIntegers(x,y);
  return 0;
}
