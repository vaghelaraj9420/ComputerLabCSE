#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define INF 9999999
#define MAX 10

int n;
void Dijkstra2(int graph[n+1][n+1], int n)
{
  int visited[n+1],i,j, nodeCost[n+1];
  for(i=0;i<=n;i++)
    {
      visited[i] = 0;
      nodeCost[i] = INF;
    }
  nodeCost[0] = 0;

  for(i=0;i<n;i++)
    {
      for(j=1;j<=n;j++)
        {
          if(graph[i][j] != 0 && graph[i][j] < nodeCost[j])
            nodeCost[j] = graph[i][j];
        }
    }
  
}


void Dijkstra(double graph[MAX][MAX], int n, int startnode)
{
  // int m=n;
	int  distance[MAX], pred[MAX];
  double cost[MAX][MAX],mindistance;
	int visited[MAX], count, nextnode, i,j;
	for(i=0;i < n;i++)
		for(j=0;j < n;j++)
			if(graph[i][j]==0)
				cost[i][j]=INF;
			else
				cost[i][j] = graph[i][j];
	
	for(i=0;i< n;i++)
	{
		distance[i]=cost[startnode][i];
		pred[i]=startnode;
		visited[i]=0;
	}
	distance[startnode]=0;
	visited[startnode]=1;
	count=1;
	while(count < n-1){
		mindistance=INF;
		for(i=0;i < n;i++)
			if(distance[i] < mindistance && !visited[i])
			{
				mindistance=distance[i];
				nextnode=i;
			}
		visited[nextnode]=1;
		for(i=0;i < n;i++)
			if(!visited[i])
				if(mindistance+cost[nextnode][i] < distance[i])
				{
					distance[i]=mindistance+cost[nextnode][i];
					pred[i]=nextnode;
				}
			count++;
	}
  
 //   int output[n], k=0;
	// for(i=0;i<n;i++)
 //    output[i] =0;
  
  i=n-1;
		if(i!=startnode)
		{
			printf("\nDistance of %d = %d", i, distance[i]);
			printf("\nPath = %d", i);
			j=n-1;
			
			do {
				j=pred[j];
        if(j!=0)
				printf(" %d", j);
        // output[k] = j;
        // k++;
			} while(j!=startnode);
			
		}
}
 


int main(void) {
  FILE *file = fopen("input.txt", "r");

  if (file == NULL) {
    perror("Unable to open file");
    exit(1);
  }

  char line[100];
  int i, j;
  fscanf(file, "%d\n", &n);
  printf(" %d\n", n);
  // fgets(line, 100, file);
  // program variables
  double A[n+1];
  double B;
  int F[n + 1][n + 1], G[n + 1][n + 1], P[n+1];
  for (i = 0; i <= n; i++) {
    for (j = 0; j <= n; j++) {
      F[i][j] = 0;
      G[i][j] = 0;
    }
  }
  P[0] =0;
  A[0] = 0;

  char *token;
  int flag1 = 0, flag2 = 0, k = 0;
  int size = 0;
  for (i = 1; i <= n; i++) {
    size += i;
  }
  size *= 2;
  int arr[size];
  printf("\n%d\n", size);

  for (i = 0, j = 0; i < n; i++) {
    fgets(line, 100, file);
    token = strtok(line, ",");

    while (token != NULL) {

      if (flag1 == 0) {
        A[i+1] = atof(token);
        flag1 = 1;
      } else if (flag2 == 0) {
        P[i+1] = atoi(token);
        flag2 = 1;
      } else {
        arr[j++] = atoi(token);
      }

      token = strtok(NULL, ",");
    }
    flag1 = 0;
    flag2 = 0;
  }

  for (i = 0; i < size; i++) {
    printf(" %d", arr[i]);
  }
  printf("\n");
  printf("\n A[] Values: ");
  for (i = 1; i <= n; i++) {
    printf(" %lf", A[i]);
  }
  printf("\n");
  
  printf("\n P[] Values: ");
  for (i = 1; i <= n; i++) {
    printf(" %d", P[i]);
  }
  printf("\n");
  

  int pass, l;
  for (k = 0, j = 1, pass = 1; k < size;) {
    for (i = 0; i < j; i++) {
      for (l = 0; l < pass; l++) {
        if (j <= n) {
          F[i][j] = arr[k];
          k++;
          i++;
        } else
          break;
      }
    }
    for (i = 0; i < j; i++) {
      for (l = 0; l < pass; l++) {
        if (j <= n) {
          G[i][j] = arr[k];
          k++;
          i++;
        } else
          break;
      }
    }
    pass++;
    j++;
  }

  printf("\nF is: \n");
  for (i = 0; i <= n; i++) {
    for (j = 0; j <= n; j++) {
      printf(" %d", F[i][j]);
    }
    printf("\n");
  }

  printf("\nG is: \n");
  for (i = 0; i <= n; i++) {
    for (j = 0; j <= n; j++) {
      printf(" %d", G[i][j]);
    }
    printf("\n");
  }

  // All Inputs taken
  // Now make the graph and compute distances between all pairs of nodes
  printf("\nEnter the value of B");
  scanf("%lf",&B);
  // double b_store[]
  double graph[10][10] = {0};
  // double graph[10][10] = {{0, 316305, 358192 ,547362, 654170 ,897523},
  // {0 ,0 ,42410, 211730 ,309638, 533065},
  // {0, 0, 0 ,169465.79999999996 ,253174.47999999998 ,461792.7599999999},
  // {0 ,0 ,0, 0, 95787.44159999999, 289348.6272},
  // {0, 0 ,0, 0 ,0, 206574.639424},
  
  // {0 ,0 ,0 ,0 ,0 ,0}}; 
  
  // Initializing the graph
  for(i=0;i<=n;i++)
    {
      for(j=0;j<=n;j++)
        graph[i][j]=0;
    }
  printf("\n");
  

    //  for(i=0;i<=n;i++)             // Printing the graph
    // {
    //   for(j=0;j<=n;j++)
    //     printf(" %d", graph[i][j]);
    //   printf("\n");
    // }
// calculation for rows of the graph matrix


  int Psum;
  for(i=0; i<=n; i++)
    {
      Psum=0;
      printf(" %lf", B);
      for(j=i+1; j<=n; j++)
        {
          Psum += P[j];
          graph[i][j] = G[i][j]*B + F[i][j] + Psum*B;
        }
      B = B - B*(A[i+1]);
      
    }
  
  printf("\n");
   for(i=0;i<=n;i++)                  // Printing the graph
    {
      for(j=0;j<=n;j++)
        printf(" %f", graph[i][j]);
      printf("\n");
    }

  // graph[n+1][n+1] = 
  Dijkstra(graph, n+1, 0);

  fclose(file);
  return 0;
}
