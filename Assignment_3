#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define INF 9999999
#define SIZE 100

int n;

// Function to check if a value is integer or not
int isInteger(double val)
{
    int truncated = (int)val;
    if(val == truncated)
      return 1;
    else
      return 0;
}

void Dijkstra(double graph[SIZE][SIZE], int n, int startnode)
{
	int  distance[SIZE], pred[SIZE];
  double cost[SIZE][SIZE],mindistance;
	int visited[SIZE], count, nextnode, i,j;

  // Initializing the cost matrix
	for(i=0;i < n;i++)
		for(j=0;j < n;j++)
			if(graph[i][j]==0)
				cost[i][j]=INF;
			else
				cost[i][j] = graph[i][j];

  // Initializing the required variables
	for(i=0;i< n;i++)
	{
		distance[i]=cost[startnode][i];
		pred[i]=startnode;
		visited[i]=0;
	}

	distance[startnode]=0;
	visited[startnode]=1;
	count=1;

  // Calculating minimum distance for each path from start node to end node
	while(count < n-1){
		mindistance=INF;
		for(i=0;i < n;i++)
			if(distance[i] < mindistance && !visited[i])
			{
				mindistance=distance[i];
				nextnode=i;
			}
		visited[nextnode]=1;
		for(i=0;i < n;i++)
			if(!visited[i])
				if(mindistance+cost[nextnode][i] < distance[i])
				{
					distance[i]=mindistance+cost[nextnode][i];
					pred[i]=nextnode;
				}
			count++;
	}

  // Printing the distance calculated and the final path from start node to end node
  i=n-1;
		if(i!=startnode)
		{
			printf("\nDistance of %d = %d", i, distance[i]);
			printf("\nPath = %d", i);
			j=n-1;
			
			do {
				j=pred[j];
        if(j!=0)
        {
          printf(" %d", j);
        }
			} while(j!=startnode);
		}
}
 


int main(void) {
  FILE *file = fopen("input.txt", "r");

  if (file == NULL) {
    perror("Unable to open file");
    exit(1);
  }

  char line[100];
  int i, j;
  fscanf(file, "%d\n", &n);
  
  // program variables to be used
  double A[n+1];                  // Defect Probability                 
  int F[n + 1][n + 1], G[n + 1][n + 1];  // Fixed cost and variable cost
  int P[n+1];                            // Manufacturing cost

  // Initializing all variables
  for (i = 0; i <= n; i++) {
    for (j = 0; j <= n; j++) {
      F[i][j] = 0;
      G[i][j] = 0;
    }
  }
  P[0] =0;
  A[0] = 0;

  char *token;
  int flag1 = 0, flag2 = 0, k = 0;
  int size = 0;
  for (i = 1; i <= n; i++) {
    size += i;
  }
  size *= 2;
  int arr[size];                 // Array for storing F[i][j] and G[i][j] values only

  for (i = 0, j = 0; i < n; i++) {
    fgets(line, 100, file);
    token = strtok(line, ",");

    // Reading the file by each token
    while (token != NULL) {

      if (flag1 == 0) {              // For taking only A[i] values
        if((atof(token) < 0) || (atof(token) > 1))
        {
          printf("\n A[] Values cannot be negative or greater than 1. Please provide values between 0 and 1\n");
          exit(1);
        }
        A[i+1] = atof(token);
        flag1 = 1;
      } else if (flag2 == 0) {        // For taking only P[i] values
         if((atoi(token) < 0))
        {
          printf("\n P[] Values cannot be negative. Please provide positive values\n");
          exit(1);
        }
        P[i+1] = atoi(token);
        flag2 = 1;
      } else {                        // Other values stored in arr[]
         if((atoi(token) < 0))
        {
          printf("\n Cost Values cannot be negative. Please provide positive values\n");
          exit(1);
        }
        arr[j++] = atoi(token);
      }

      token = strtok(NULL, ",");        // Moving on to next token
    }
    flag1 = 0;
    flag2 = 0;
  }

  int pass, l;
  for (k = 0, j = 1, pass = 1; k < size;) {
    for (i = 0; i < j; i++) {
      for (l = 0; l < pass; l++) {
        if (j <= n) {
          F[i][j] = arr[k];
          k++;
          i++;
        } else
          break;
      }
    }
    for (i = 0; i < j; i++) {
      for (l = 0; l < pass; l++) {
        if (j <= n) {
          G[i][j] = arr[k];
          k++;
          i++;
        } else
          break;
      }
    }
    pass++;
    j++;
  }

  
  printf("\nEnter the value of B: ");
  double B;                               // Batch size
  scanf("%lf", &B);
  
  if((B < 0) || (isInteger(B)==0))
        {
          printf("\n B Value cannot be negative or Fraction. Please provide a positive integer value\n");
          exit(1);
        }


  
  // All Inputs taken
  // Now make the graph and compute distances between all pairs of nodes
  double graph[SIZE][SIZE] = {0};

  // Initializing the graph
  for(i=0;i<=n;i++)
    {
      for(j=0;j<=n;j++)
        graph[i][j]=0;
    }
  
// calculation for rows of the graph matrix
  int Psum;
  for(i=0; i<=n; i++)
    {
      Psum=0;
      for(j=i+1; j<=n; j++)
        {
          Psum += P[j];
          graph[i][j] = G[i][j]*B + F[i][j] + Psum*B;
        }
      B = B - B*(A[i+1]);
      
    }

  // Implementing Dijkstra on the graph
  Dijkstra(graph, n+1, 0);

  fclose(file);
  return 0;
}
