#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

struct date {
  int day, month, year;
  char name[100];
};

// create another structure to store the date differences and the dates and the
// corresponding student names
struct DateDiff {
  int diff;
  struct date d1, d2;
};

struct DisjointSet {
  char name1[100];
  char name2[100];
};

char *splitString(char str[], int start, int len) {
  int i, j = 0;
  char *data = malloc(sizeof(char) * (len + 1));
  char *ptr = str;

  for (i = 0; i < len; i++) {
    data[i] = str[i + start];
  }
  data[i] = '\n';
  return data;
}

int daysPerMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

int calcLeapYears(struct date d1, struct date d2) {
  int leapYearDays = 0;
  int i, j;

  for (i = d1.year + 1; i < d2.year; i++) {
    if ((i % 400) == 0)
      leapYearDays++;
    else if ((i % 100 != 0) && (i % 4 == 0))
      leapYearDays++;
  }

  if (d1.month <= 2) {
    if (d1.year % 400 == 0)
      leapYearDays++;
    else if ((d1.year % 100 != 0) && (d1.year % 4 == 0))
      leapYearDays++;
  }

  if (d2.month <= 2) {
    if (d2.year % 400 == 0)
      leapYearDays++;
    else if ((d2.year % 100 != 0) && (d2.year % 4 == 0))
      leapYearDays++;
  }

  return leapYearDays;
}

int dateDifference(struct date d1, struct date d2) {

  long int diff = 0;
  int yearDiff = 0, i;

  diff += (daysPerMonth[d1.month] - d1.day) + 1;

  i = d1.month;
  while (i < 12) {
    diff = diff + daysPerMonth[i];
    i++;
  }

  for (i = 1; i < d2.month; i++) {
    diff += daysPerMonth[i];
  }
  diff += d2.day;

  yearDiff = d2.year - d1.year - 1;
  diff += yearDiff * 365;
  int LeapYearDays = calcLeapYears(d1, d2);
  diff += LeapYearDays;

  if (diff < 0)
    return diff * (-1);
  else
    return diff;
}

int dateCompare(struct date d1, struct date d2) {
  if (d1.year < d2.year)
    return -1;

  else if (d1.year > d2.year)
    return 1;

  if (d1.year == d2.year) {
    if (d1.month < d2.month)
      return -1;
    else if (d1.month > d2.month)
      return 1;
    else if (d1.day < d2.day)
      return -1;
    else if (d1.day > d2.day)
      return 1;
    else
      return 0;
  }
}

int fact(int n) {
  int i, f = 1;
  for (i = 1; i <= n; i++) {
    f = f * i;
  }
  return f;
}

void Algorithm_A(struct date d[], int n, int k) {
  int ncr, j, i;
  // Calculating total number of iterations for generating each pair
  ncr = fact(n) / (fact(2) * fact(n - 2));
  struct DateDiff dateDiff[ncr];
  int z = 0;

  // Computing Age Difference between all pairs of students
  for (i = 0; i < n; i++) {
    for (j = i + 1; j < n; j++) {
      dateDiff[z].diff = dateDifference(d[i], d[j]);
      dateDiff[z].d1 = d[i];
      dateDiff[z].d2 = d[j];
      z++;
    }
  }

  struct DateDiff temp;
  for (i = 0; i < ncr - 1; i++) {
    for (j = i + 1; j < ncr; j++) {
      if (dateDiff[i].diff > dateDiff[j].diff) {
        temp = dateDiff[i];
        dateDiff[i] = dateDiff[j];
        dateDiff[j] = temp;
      }
    }
  }
  printf("\n");

  struct date tempDates[n];
  // Copying structure "d" to structure "tempDates"
  memcpy(tempDates, d, sizeof(tempDates));
  printf("\nTop K Disjoint Pairs using Algorithm A are:\n");

  struct DisjointSet disjointSet[n - 1];
  int size = 0, flag = 0;
  j = 0;
  for (i = 0; i < k; i++) {
    flag = 0;
    strcpy(disjointSet[size].name1, dateDiff[i].d1.name);
    strcpy(disjointSet[size].name2, dateDiff[i].d2.name);

    for (j = 0; j < size; j++) {
      if ((strcmp(dateDiff[i].d2.name, disjointSet[j].name1) == 0) ||
          (strcmp(dateDiff[i].d2.name, disjointSet[j].name2) == 0) ||
          (strcmp(dateDiff[i].d1.name, disjointSet[j].name1) == 0) ||
          (strcmp(dateDiff[i].d1.name, disjointSet[j].name2) == 0))
        flag = 1;
    }

    if (flag == 0) {
      printf("\n %d ", dateDiff[i].diff);
      printf("%s ", dateDiff[i].d1.name);
      printf("%s ", dateDiff[i].d2.name);
    }
    size++;
  }
}

// compute only Disjoint Pairs
void Algorithm_B(struct date d[], int n, int k) {
  struct date sortedDates[n];
  // Copying structure "d" to structure "sortedDates"
  memcpy(sortedDates, d, sizeof(sortedDates));
  int i, j;

  // Sorting DOBs of students
  struct date temp;
  for (i = 0; i < n - 1; i++) {
    for (j = i + 1; j < n; j++) {
      if (dateCompare(sortedDates[j], sortedDates[i]) == 1) {
        temp = sortedDates[i];
        sortedDates[i] = sortedDates[j];
        sortedDates[j] = temp;
      }
    }
  }

  // Calculating age differences for each consecutive pair and storing them in
  // another structure DateDiff int diff[n-1];
  struct DateDiff dateDiff[n - 1];
  for (i = 0; i < n - 1; i++) {
    dateDiff[i].diff = dateDifference(sortedDates[i + 1], sortedDates[i]);
    dateDiff[i].d1 = sortedDates[i];
    dateDiff[i].d2 = sortedDates[i + 1];
  }

  // Sorting the age differences stored in DateDiff structure
  printf("\n");
  struct DateDiff temp2;
  // struct DateDiff disjoint_pair[n];
  for (i = 0; i < n - 1; i++) {
    for (j = i + 1; j < n; j++) {
      if (dateDiff[i].diff > dateDiff[j].diff) {
        temp2 = dateDiff[i];
        dateDiff[i] = dateDiff[j];
        dateDiff[j] = temp2;
      }
    }
  }
  // Printing the top k disjoint pairs from the structure
  printf("\nTop K Disjoint pairs using Algorithm B are:\n");

  struct DisjointSet disjointSet[n - 1];
  int size = 0, flag = 0;
  j = 0;
  for (i = 1; i < k + 1; i++) {
    flag = 0;
    strcpy(disjointSet[size].name1, dateDiff[i].d1.name);
    strcpy(disjointSet[size].name2, dateDiff[i].d2.name);

    for (j = 0; j < size; j++) {
      if ((strcmp(dateDiff[i].d2.name, disjointSet[j].name1) == 0) ||
          (strcmp(dateDiff[i].d2.name, disjointSet[j].name2) == 0) ||
          (strcmp(dateDiff[i].d1.name, disjointSet[j].name1) == 0) ||
          (strcmp(dateDiff[i].d1.name, disjointSet[j].name2) == 0))
        flag = 1;
    }

    if (flag == 0) {
      printf("\n %d ", dateDiff[i].diff);
      printf("%s ", dateDiff[i].d1.name);
      printf("%s ", dateDiff[i].d2.name);
    }
    size++;
  }

  printf("\n");
  printf("\n");
  printf("\n");
}

// Heap code...

void insert2(struct DateDiff arr[], int index) {
  int i = index;
  struct DateDiff temp;
  temp = arr[index];

  while (i > 0 && temp.diff < arr[i / 2].diff) {
    arr[i] = arr[i / 2];
    i = i / 2;
  }
  arr[i] = temp;
}

struct DateDiff Delete2(struct DateDiff A[], int n) {
  int i, j, x;
  struct DateDiff temp, val;
  val = A[0];
  A[0] = A[n];
  A[n] = val;
  i = 0;
  j = i * 2;
  while (j < n - 1) {
    if (A[j + 1].diff < A[j].diff)
      j = j + 1;
    if (A[i].diff > A[j].diff) {
      temp = A[i];
      A[i] = A[j];
      A[j] = temp;
      i = j;
      j = 2 * j;
    } else
      break;
  }
  return val;
}

void Algorithm_C(struct date d[], int n, int k) {
  struct date sortedDates[n];
  memcpy(sortedDates, d, sizeof(sortedDates));
  int i, j, z;
  z = 0;

  // Sorting DOBs of students
  struct date temp;
  for (i = 0; i < n - 1; i++) {
    for (j = i + 1; j < n; j++) {
      if (dateCompare(sortedDates[i], sortedDates[j]) == 1) {
        temp = sortedDates[i];
        sortedDates[i] = sortedDates[j];
        sortedDates[j] = temp;
      }
    }
  }

  // Calculating age differences for each consecutive pair and storing them in
  // another structure DateDiff int diff[n-1];
  struct DateDiff dateDiff[n - 1];
  for (i = 0; i < n - 1; i++) {
    dateDiff[i].diff = dateDifference(sortedDates[i], sortedDates[i + 1]);
    dateDiff[i].d1 = sortedDates[i];
    dateDiff[i].d2 = sortedDates[i + 1];
  }
  // Min Heap code from here...

  for (i = 0; i < n - 1; i++) {
    insert2(dateDiff, i);
  }

  struct DisjointSet disjointSet[n - 1];
  int size = 0, flag = 0;

  printf("\nThe date differences sorted by Algorithm C are:\n");

  struct DateDiff tempDiff;
  for (i = n - 2; i >= 0; i--) {
    flag = 0;
    tempDiff = Delete2(dateDiff, i);
    strcpy(disjointSet[size].name1, tempDiff.d1.name);
    strcpy(disjointSet[size].name2, tempDiff.d2.name);

    for (j = 0; j < size; j++) {
      if ((strcmp(tempDiff.d2.name, disjointSet[j].name1) == 0) ||
          (strcmp(tempDiff.d2.name, disjointSet[j].name2) == 0) ||
          (strcmp(tempDiff.d1.name, disjointSet[j].name1) == 0) ||
          (strcmp(tempDiff.d1.name, disjointSet[j].name2) == 0))
        flag = 1;
    }

    if (flag == 0)
      printf(" %d %s %s\n", tempDiff.diff, tempDiff.d2.name, tempDiff.d1.name);
    size++;
  }
  printf("\n");
  printf("\n");
}

int main(void) {
  FILE *file = fopen("student.txt", "r");

  if (file == NULL) {
    perror("Unable to open file");
    exit(1);
  }

  char line[50];

  int n, k;
  fscanf(file, "%d %d\n", &n, &k);
  
  // Collecting names...........
  char names[n + 1][100];
  int i = 0;
  while (fscanf(file, "%*s %s", line) == 1) {
    strcpy(names[i], line);
    i = i + 1;
  }
 

  for (i = 0; i < n + 1; i++) {
    strcpy(names[i], names[i + 1]);
  }

  // Storing names in structure
  struct date d[n];
  for (i = 0; i < n; i++) {
    strcpy(d[i].name, names[i]);
  }

  // Collecting DOBs......
  char dob[n][100];
  i = 0;
  printf("\n");
  FILE *file2 = fopen("student.txt", "r");
  if (file2 == NULL) {
    perror("Unable to open file");
    exit(1);
  }

  while (fscanf(file2, "%s %*s", line) == 1) {
    strcpy(dob[i], line);
    i = i + 1;
  }

  printf("%d %d\n", n, k);
  for (i = 0; i < n; i++) {
    strcpy(dob[i], dob[i + 1]);
  }

  // Storing dates in structure
  for (i = 0; i < n; i++) {
    d[i].day = atoi(splitString(dob[i], 0, 2));
    d[i].month = atoi(splitString(dob[i], 2, 2));
    d[i].year = atoi(splitString(dob[i], 4, 4));
  }

 
  Algorithm_A(d, n, k);
 
  Algorithm_B(d, n, k);  

  Algorithm_C(d, n, k);


  fclose(file);
  fclose(file2);
  return 0;
}
